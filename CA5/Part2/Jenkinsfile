pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = '1a92e342-7273-4651-957d-895877a5eac9'
        DOCKER_IMAGE = 'badjaras/springbootapp'
        DOCKER_TAG = "${env.BUILD_ID}"
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    }

    stages {
        stage('Check Docker') {
            steps {
                echo 'Checking Docker installation...'
                sh 'echo $PATH'
                sh 'which docker'
                sh 'docker --version'
                sh 'docker info'
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                git url: 'https://github.com/FranciscoRamosMartins/devops-23-24-JPE-1231865.git'
            }
        }

        stage('Set Permissions') {
            steps {
                dir('CA2/Part2') {
                    echo 'Setting executable permissions on gradlew...'
                    sh 'chmod +x gradlew'
                }
            }
        }

        stage('Assemble') {
            steps {
                dir('CA2/Part2') {
                    echo 'Assembling the application...'
                    sh './gradlew assemble'
                }
            }
        }

        stage('Test') {
            steps {
                dir('CA2/Part2') {
                    echo 'Running unit tests...'
                    sh './gradlew test'
                }
            }
        }

        stage('Javadoc') {
            steps {
                dir('CA2/Part2') {
                    echo 'Generating Javadoc...'
                    sh './gradlew javadoc'
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'build/docs/javadoc',
                        reportFiles: 'index.html',
                        reportName: 'Javadoc'
                    ])
                }
            }
        }

        stage('Archive') {
            steps {
                dir('CA2/Part2') {
                    echo 'Archiving artifacts...'
                    archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                }
            }
        }

        stage('Create Dockerfile') {
            steps {
                dir('CA2/Part2/') {
                    script {
                        def dockerfileContent = """
                        FROM tomcat:10
                        WORKDIR /app
                        COPY . .
                        EXPOSE 8080
                        ENTRYPOINT ["./gradlew"]
                        CMD ["bootRun"]
                        """
                        writeFile file: 'Dockerfile', text: dockerfileContent
                    }
                }
            }
        }

        stage('Publish Image') {
            steps {
                script {
                    echo 'Building and publishing Docker image...'
                    withEnv(["PATH=${env.PATH}"]) {
                        // Explicitly setting the Docker context to default
                        sh 'docker context use default'
                        docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                            dir('CA2/Part2') {
                                def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                                customImage.push('latest')
                            }
                        }
                    }
                }
            }
        }
    }
}